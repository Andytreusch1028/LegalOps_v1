// LegalOps v1 - Comprehensive Database Schema
// Designed to eliminate data duplication and support all filing types

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE USER & CLIENT MANAGEMENT
// ============================================================================

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  firstName     String?
  lastName      String?
  phone         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // User type and permissions
  userType      UserType @default(CUSTOMER)
  role          UserRole @default(INDIVIDUAL_CUSTOMER)
  isActive      Boolean  @default(true)

  // For Professional Customers (lawyers, accountants managing client businesses)
  companyName   String?  // "Smith & Associates Law Firm"
  isWhiteLabel  Boolean  @default(false)

  // For Internal Staff
  department    String?  // "Fulfillment", "Operations", "Executive"
  managerId     String?  // Reports to this manager
  manager       User?    @relation("ManagerSubordinates", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates  User[]   @relation("ManagerSubordinates")

  // Relationships
  clients       Client[]
  orders        Order[]
  notifications Notification[]
  
  @@map("users")
}

enum UserType {
  CUSTOMER
  PARTNER
  EMPLOYEE
  ADMIN
  SITE_ADMIN
}

// User Role - Determines dashboard and permissions
enum UserRole {
  // External Customers
  INDIVIDUAL_CUSTOMER      // Individual managing their own businesses (default)
  PROFESSIONAL_CUSTOMER    // Law firm/accountant managing client businesses

  // Internal Staff
  FULFILLMENT_STAFF       // Daily order processing and AI form review
  MANAGER                 // Mid-level operations manager
  EXECUTIVE               // C-suite, high-level metrics

  // Special
  ADMIN                   // Full system access
}

// Client represents a business owner/customer
// One User can have multiple Clients (e.g., managing multiple businesses)
model Client {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  
  // Client Information
  firstName         String
  lastName          String
  email             String
  phone             String?
  
  // Client Type
  clientType        ClientType @default(ONE_TIME)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  businessEntities  BusinessEntity[]
  addresses         Address[]
  
  @@map("clients")
}

enum ClientType {
  ONE_TIME          // One-time customer
  RETURNING         // Returning customer
  SUBSCRIPTION      // Active subscription customer
}

// ============================================================================
// ADDRESS MANAGEMENT (Reusable across all entities)
// ============================================================================

model Address {
  id            String   @id @default(cuid())
  
  // Address Details
  street        String
  street2       String?
  city          String
  state         String
  zipCode       String
  country       String   @default("USA")
  
  // Address Type
  addressType   AddressType
  
  // Ownership (polymorphic - can belong to Client, BusinessEntity, or RegisteredAgent)
  clientId      String?
  client        Client?  @relation(fields: [clientId], references: [id])
  
  businessEntityId String?
  businessEntity   BusinessEntity? @relation(fields: [businessEntityId], references: [id])
  
  registeredAgentId String?
  registeredAgent   RegisteredAgent? @relation(fields: [registeredAgentId], references: [id])
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("addresses")
}

enum AddressType {
  PRINCIPAL         // Principal business address
  MAILING           // Mailing address
  REGISTERED_AGENT  // Registered agent address
  PERSONAL          // Personal address
}

// ============================================================================
// BUSINESS ENTITY MANAGEMENT
// ============================================================================

model BusinessEntity {
  id                String   @id @default(cuid())
  clientId          String
  client            Client   @relation(fields: [clientId], references: [id])
  
  // Entity Information
  legalName         String
  dbaName           String?  // Doing Business As
  entityType        EntityType
  
  // State Information
  stateOfFormation  String   @default("FL")
  documentNumber    String?  // Sunbiz document number
  filingDate        DateTime?
  feiNumber         String?  // Federal Employer Identification Number (EIN)

  // Status
  status            EntityStatus @default(PENDING)
  
  // Business Purpose
  purpose           String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relationships
  addresses         Address[]
  registeredAgent   RegisteredAgent?
  managersOfficers  ManagerOfficer[]
  filings           Filing[]
  
  @@map("business_entities")
}

enum EntityType {
  LLC                    // Limited Liability Company
  CORPORATION            // Corporation
  NONPROFIT_CORPORATION  // Nonprofit Corporation
  PARTNERSHIP            // Partnership
  SOLE_PROPRIETORSHIP    // Sole Proprietorship
}

enum EntityStatus {
  PENDING       // Not yet filed
  FILED         // Filed with state
  ACTIVE        // Active and in good standing
  INACTIVE      // Inactive
  DISSOLVED     // Dissolved
}

// ============================================================================
// REGISTERED AGENT MANAGEMENT
// ============================================================================

model RegisteredAgent {
  id                String   @id @default(cuid())
  businessEntityId  String   @unique
  businessEntity    BusinessEntity @relation(fields: [businessEntityId], references: [id])
  
  // Agent Information
  agentType         AgentType
  
  // Individual Agent
  firstName         String?
  lastName          String?
  
  // Company Agent
  companyName       String?
  
  // Contact
  email             String?
  phone             String?
  
  // Address
  addresses         Address[]
  
  // Service Status
  serviceStartDate  DateTime?
  serviceEndDate    DateTime?
  isActive          Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("registered_agents")
}

enum AgentType {
  INDIVIDUAL
  COMPANY
  LEGALOPS  // LegalOps providing RA service
}

// ============================================================================
// MANAGERS & OFFICERS (Reusable across entities)
// ============================================================================

model ManagerOfficer {
  id                String   @id @default(cuid())
  businessEntityId  String
  businessEntity    BusinessEntity @relation(fields: [businessEntityId], references: [id])
  
  // Person Information
  firstName         String
  lastName          String
  title             String?  // Manager, President, Secretary, etc.
  
  // Role Type
  roleType          RoleType
  
  // Contact
  email             String?
  phone             String?
  
  // Address (stored as text for simplicity, or could link to Address table)
  address           String
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("managers_officers")
}

enum RoleType {
  MANAGER           // LLC Manager
  MEMBER            // LLC Member
  PRESIDENT         // Corporation President
  VICE_PRESIDENT    // Corporation VP
  SECRETARY         // Corporation Secretary
  TREASURER         // Corporation Treasurer
  DIRECTOR          // Corporation Director
  PARTNER           // Partnership Partner
}

// ============================================================================
// FILING MANAGEMENT (All filing types)
// ============================================================================

model Filing {
  id                String   @id @default(cuid())
  businessEntityId  String
  businessEntity    BusinessEntity @relation(fields: [businessEntityId], references: [id])
  
  // Filing Information
  filingType        FilingType
  filingStatus      FilingStatus @default(DRAFT)
  
  // Filing Data (JSON for flexibility)
  filingData        Json     // Stores all form-specific data
  
  // State Filing Information
  confirmationNumber String?
  trackingNumber    String?
  filedDate         DateTime?
  approvedDate      DateTime?
  
  // Documents
  documents         FilingDocument[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  submittedAt       DateTime?
  
  @@map("filings")
}

enum FilingType {
  LLC_FORMATION              // Articles of Organization
  CORP_FORMATION             // Articles of Incorporation
  NONPROFIT_FORMATION        // Nonprofit Articles
  ANNUAL_REPORT              // Annual Report
  AMENDMENT                  // Amendment to Articles
  DISSOLUTION                // Dissolution
  REINSTATEMENT              // Reinstatement
  NAME_CHANGE                // Name Change
  REGISTERED_AGENT_CHANGE    // RA Change
  ADDRESS_CHANGE             // Address Change
  EIN_APPLICATION            // IRS EIN (SS-4)
  FICTITIOUS_NAME            // DBA Registration
}

enum FilingStatus {
  DRAFT          // Being prepared
  READY          // Ready to submit
  SUBMITTED      // Submitted to state
  PENDING        // Pending state review
  APPROVED       // Approved by state
  REJECTED       // Rejected by state
  COMPLETED      // Fully completed
  CANCELLED      // Cancelled
}

model FilingDocument {
  id          String   @id @default(cuid())
  filingId    String
  filing      Filing   @relation(fields: [filingId], references: [id])
  
  // Document Information
  documentType DocumentType
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("filing_documents")
}

enum DocumentType {
  ARTICLES_OF_ORGANIZATION
  ARTICLES_OF_INCORPORATION
  CERTIFICATE_OF_STATUS
  ANNUAL_REPORT
  EIN_LETTER
  RECEIPT
  CONFIRMATION
  OTHER
}

// ============================================================================
// ORDER & PAYMENT MANAGEMENT
// ============================================================================

model Order {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  
  // Order Information
  orderNumber     String   @unique
  orderStatus     OrderStatus @default(PENDING)
  
  // Pricing
  subtotal        Decimal  @db.Decimal(10, 2)
  tax             Decimal  @db.Decimal(10, 2)
  total           Decimal  @db.Decimal(10, 2)
  
  // Payment
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  stripePaymentId String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  paidAt          DateTime?
  completedAt     DateTime?
  
  // Relationships
  orderItems      OrderItem[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  
  // Item Information
  serviceType ServiceType
  description String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("order_items")
}

enum ServiceType {
  LLC_FORMATION
  CORP_FORMATION
  ANNUAL_REPORT
  REGISTERED_AGENT
  EIN_APPLICATION
  AMENDMENT
  DISSOLUTION
  NAME_RESERVATION
  EXPEDITED_PROCESSING
}

// ============================================================================
// NOTIFICATION SYSTEM
// ============================================================================

model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // Notification Details
  type        NotificationType
  title       String
  message     String
  
  // Status
  isRead      Boolean  @default(false)
  readAt      DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("notifications")
}

enum NotificationType {
  FILING_UPDATE
  DOCUMENT_READY
  PAYMENT_DUE
  COMPLIANCE_ALERT
  SYSTEM_UPDATE
}

